PROCSS:

RETURN_TRUE:
	MOV(R0, SOB_TRUE);
	JUMP(END);

PRINT_R0_VALUE:
	PUSH(FP);
	MOV(FP, SP);
	CMP(R0, SOB_VOID);
	JUMP_EQ(END);
	PUSH(R0);
	CALL(WRITE_SOB);
	DROP(IMM(1));

PRINT_END:
	JUMP(END);

CHECK_BOOL:
	DROP(1);
	CMP(1, R0);
	JUMP(CHECK_BOOL_RESULT);		
		
CHECK_BOOL_RESULT:
	JUMP_EQ(RETURN_TRUE);
	MOV(R0, SOB_FALSE);
	JUMP(END);

#TODO: append (variadic)

#TODO: apply

/**** < var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_LESSTHAN:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 0);
	MOV(R2, FPARG(NUMOFARGS));
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_LESSTHAN_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_LESSTHAN_END);
	CMP(R3, 2);
	JUMP_NE(VAR_LESSTHAN_LOOP2);
	MOV(R4, FPARG(R3)); /**** Scheme int ****/
	MOV(R1, INDD(R4, 1)); /**** Scheme int number ****/ 	
	ADD(R3, 1);
	JUMP(VAR_LESSTHAN_LOOP);
VAR_LESSTHAN_LOOP2:
	MOV(R4, FPARG(R3)); /**** Scheme int ****/
	CMP(R1, INDD(R4, 1)); /**** Scheme int number ****/  
	JUMP_GE(VAR_LESSTHAN_END);
	ADD(R3, 1);
	MOV(R1, INDD(R4, 1));
	JUMP(VAR_LESSTHAN_LOOP);
VAR_LESSTHAN_END:
	CMP(R2, R3);
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(CHECK_BOOL_RESULT);

/**** = var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_EQUAL:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 0);
	MOV(R2, FPARG(NUMOFARGS));
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_EQUAL_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_EQUAL_END);
	CMP(R3, 2);
	JUMP_NE(VAR_EQUAL_LOOP2);
	MOV(R4, FPARG(R3)); 
	MOV(R1, INDD(R4, 1)); 	
	ADD(R3, 1);
	JUMP(VAR_EQUAL_LOOP);
VAR_EQUAL_LOOP2:
	MOV(R4, FPARG(R3));
	CMP(R1, INDD(R4, 1)); 
	JUMP_NE(VAR_EQUAL_END);
	ADD(R3, 1);
	JUMP(VAR_EQUAL_LOOP);
VAR_EQUAL_END:
	CMP(R2, R3);
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(CHECK_BOOL_RESULT);

/**** > var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_GREATERTHAN:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 0);
	MOV(R2, FPARG(NUMOFARGS));
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_GREATERTHAN_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_GREATERTHAN_END);
	CMP(R3, 2);
	JUMP_NE(VAR_GREATERTHAN_LOOP2);
	MOV(R4, FPARG(R3));
	MOV(R1, INDD(R4, 1));
	ADD(R3, 1);
	JUMP(VAR_GREATERTHAN_LOOP);
VAR_GREATERTHAN_LOOP2:
	MOV(R4, FPARG(R3));
	CMP(R1, INDD(R4, 1));
	JUMP_LE(VAR_GREATERTHAN_END);
	ADD(R3, 1);
	MOV(R1, INDD(R4, 1));
	JUMP(VAR_GREATERTHAN_LOOP);
VAR_GREATERTHAN_END:
	CMP(R2, R3);
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(CHECK_BOOL_RESULT);

/**** + var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_PLUS:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 0);
	MOV(R2, FPARG(NUMOFARGS));
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_PLUS_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_PLUS_END);
	MOV(R4, FPARG(R3));
	ADD(R1, INDD(R4, 1));
	ADD(R3, 1);
	JUMP(VAR_PLUS_LOOP);
VAR_PLUS_END:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1); 
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(END);

/**** / var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_DIV:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 1);
	MOV(R2, FPARG(NUMOFARGS));
	CMP(R2, 1);
	JUMP_NE(VAR_DIV_MORE_THAN_ONE_ARG);
	MOV(R1, 1);
	DIV(R1, INDD(FPARG(2), 1));
	JUMP(VAR_DIV_END);
VAR_DIV_MORE_THAN_ONE_ARG:
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_DIV_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_DIV_END);
	CMP(R3, 2);
	JUMP_NE(VAR_DIV_LOOP2);
	MOV(R4, FPARG(R3));
	MOV(R1, INDD(R4, 1));	
	ADD(R3, 1);
	JUMP(VAR_DIV_LOOP);
VAR_DIV_LOOP2:
	MOV(R4, FPARG(R3));
	DIV(R1, INDD(R4, 1));
	ADD(R3, 1);
	JUMP(VAR_DIV_LOOP);
VAR_DIV_END:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1); 
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(END);

/**** * var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_MUL:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R1, 1);
	MOV(R2, FPARG(NUMOFARGS));
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_MUL_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_MUL_END);
	MOV(R4, FPARG(R3));
	MUL(R1, INDD(R4, 1));
	ADD(R3, 1);
	JUMP(VAR_MUL_LOOP);
VAR_MUL_END:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1); 
	JUMP(END);

/**** - var ****/
/**** R1 = Accumulator, R2 = Num of loops, R3 = Index****/
VAR_MIN:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	PUSH(R4);
	MOV(R1, 0);
	MOV(R2, FPARG(NUMOFARGS));
	CMP(R2, 1);
	JUMP_NE(VAR_MIN_MORE_THAN_ONE_ARG);
	MOV(R1, 0);
	SUB(R1, INDD(FPARG(2), 1));
	JUMP(VAR_MIN_END);
VAR_MIN_MORE_THAN_ONE_ARG:
	ADD(R2, 2);
	MOV(R3, 2); 	
VAR_MIN_LOOP:
	CMP(R2, R3);
	JUMP_EQ(VAR_MIN_END);
	CMP(R3, 2);
	JUMP_NE(VAR_MIN_LOOP2);
	MOV(R4, FPARG(R3)); 
	MOV(R1, INDD(R4, 1)); 
	ADD(R3, 1);
	JUMP(VAR_MIN_LOOP);
VAR_MIN_LOOP2:
	MOV(R4, FPARG(R3)); 
	SUB(R1, INDD(R4, 1)); 
	ADD(R3, 1);
	JUMP(VAR_MIN_LOOP);
VAR_MIN_END:
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1); 
	POP(R4);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(END);


PREDICATS:

ISBOOLEAN:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_BOOL);
	JUMP(CHECK_BOOL_RESULT);


ISCHAR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(FPARG(2));
	CALL(IS_SOB_CHAR);
	JUMP(CHECK_BOOL);

ISNULL:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(R0, SOB_NIL);
	JUMP(CHECK_BOOL_RESULT);

/** TODO: CHECK ABOUT INTEGER/RATIONAL/FRACTION **/
ISNUMBER:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_INTEGER);
	JUMP(CHECK_BOOL_RESULT);

ISINTEGER:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_INTEGER);
	JUMP(CHECK_BOOL_RESULT);

ISPAIR:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_PAIR);
	JUMP(CHECK_BOOL_RESULT);

ISSTRING:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_STRING);
	JUMP(CHECK_BOOL_RESULT);

ISSYMBOL:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_SYMBOL);
	JUMP(CHECK_BOOL_RESULT);			

ISVECTOR:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R0, FPARG(2));
	CMP(IND(R0), T_VECTOR);
	JUMP(CHECK_BOOL_RESULT);
	
ISZERO:
	PUSH(FP);
	MOV(FP, SP);
	MOV(R2, FPARG(2));
	MOV(R2, INDD(R2, 1));
	CMP(R2, 0);
	JUMP(CHECK_BOOL_RESULT);

ISPROCEDURE:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(FPARG(2));
	CALL(IS_SOB_CLOSURE);
	JUMP(CHECK_BOOL);


REMAINDER:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R1, INDD(R1, 1));
	MOV(R2, FPARG(3));
	MOV(R2, INDD(R2, 1));
	REM(R1, R2);
	PUSH(R1);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(R2);
	POP(R1);
	JUMP(END);

STRINGS:

STR_LENGTH:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, INDD(R1, 1));
	PUSH(R2);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(R2);
	POP(R1);
	JUMP(END);

STR_REF:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(R2, INDD(R2, 1));
	ADD(R2, 2);
	MOV(R1, INDD(R1, R2));
	PUSH(R1);
	CALL(MAKE_SOB_CHAR);
	DROP(1);
	POP(R2);
	POP(R1);
	JUMP(END);

STR_SET:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(R3, FPARG(4));
	MOV(R2, INDD(R2, 1));
	MOV(R3, INDD(R3, 1));
	ADD(R2, 2);
	MOV(INDD(R1, R2), R3);
	MOV(R0, SOB_VOID);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(END);

MAKE_STRING:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R5);
	MOV(R1, FPARG(2)); 
	MOV(R1, INDD(R1, 1));
	MOV(R5, FPARG(NUMOFARGS));
	CMP(R5, 1);
	JUMP_EQ(MAKE_STRING_CHAR0);
	MOV(R2, FPARG(3));
	MOV(R2, INDD(R2, 1));
	JUMP(MAKE_STRING_ARG2);
MAKE_STRING_CHAR0:
	PUSH(0);
	CALL(MAKE_SOB_CHAR);
	DROP(1); 
	MOV(R2, R0);	
MAKE_STRING_ARG2:
	MOV(R5, 0);
MAKE_STRING_PUSH_LOOP:
	CMP(R5, R1);
	JUMP_EQ(MAKE_STRING_AFTER_PUSH);
	PUSH(R2);
	ADD(R5, 1);
	JUMP(MAKE_STRING_PUSH_LOOP);
MAKE_STRING_AFTER_PUSH:
	PUSH(R1);
	CALL(MAKE_SOB_STRING);
	POP(R1);
	DROP(R1);
	POP(R5);
	POP(R2);
	POP(R1);
	JUMP(END);

VECTORS:

VECTOR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R5);
	MOV(R1, FPARG(NUMOFARGS));
	MOV(R5, 0);	
	MOV(R2, 2);
PUSH_VEC_ARGS:
	CMP(R5, R1);
	JUMP_EQ(VECTOR_AFTER_PUSH_ARGS);
	MOV(R3, FPARG(R2));
	PUSH(R3);
	ADD(R5, 1);
	ADD(R2, 1);
	JUMP(PUSH_VEC_ARGS);
VECTOR_AFTER_PUSH_ARGS:
	PUSH(R1);
	CALL(MAKE_SOB_VECTOR);
	POP(R1);
	DROP(R1);
	POP(R5);
	POP(R2);
	POP(R1);
	JUMP(END);	

VEC_LENGTH:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, INDD(R1, 1));
	PUSH(R2);
	CALL(MAKE_SOB_INTEGER);
	DROP(1);
	POP(R2);
	POP(R1);
	JUMP(END);

VEC_REF:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(R2, INDD(R2, 1));
	ADD(R2, 2);
	MOV(R1, INDD(R1, R2));
	MOV(R0, R1);
	POP(R2);
	POP(R1);
	JUMP(END);

VEC_SET:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R3);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(R3, FPARG(4));
	MOV(R2, INDD(R2, 1));
	ADD(R2, 2);
	MOV(INDD(R1, R2), R3);
	MOV(R0, SOB_VOID);
	POP(R3);
	POP(R2);
	POP(R1);
	JUMP(END);

MAKE_VECTOR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	PUSH(R5);
	MOV(R1, FPARG(2)); 
	MOV(R1, INDD(R1, 1));
	MOV(R5, FPARG(NUMOFARGS));
	CMP(R5, 1);
	JUMP_EQ(MAKE_VECTOR_CHAR0);
	MOV(R2, FPARG(3));
	JUMP(MAKE_VECTOR_ARG2);
MAKE_VECTOR_CHAR0:
	PUSH(0);
	CALL(MAKE_SOB_INTEGER);
	DROP(1); 
	MOV(R2, R0);	
MAKE_VECTOR_ARG2:
	MOV(R5, 0);
MAKE_VECTOR_PUSH_LOOP:
	CMP(R5, R1);
	JUMP_EQ(MAKE_VECTOR_AFTER_PUSH);
	PUSH(R2);
	ADD(R5, 1);
	JUMP(MAKE_VECTOR_PUSH_LOOP);
MAKE_VECTOR_AFTER_PUSH:
	PUSH(R1);
	CALL(MAKE_SOB_VECTOR);
	POP(R1);
	DROP(R1);
	POP(R5);
	POP(R2);
	POP(R1);
	JUMP(END);

PAIRS:

CONS:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	PUSH(R2);
	PUSH(R1);
	CALL(MAKE_SOB_PAIR);
	DROP(2);
	POP(R2);
	POP(R1);
	JUMP(END);

CAR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R1, INDD(R1, 1));
	MOV(R0, R1);
	POP(R2);
	POP(R1);
	JUMP(END);

CDR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R1, INDD(R1, 2));
	MOV(R0, R1);
	POP(R2);
	POP(R1);
	JUMP(END);

SET_CAR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(INDD(R1, 1), R2);
	MOV(R0, SOB_VOID);
	POP(R2);
	POP(R1);
	JUMP(END);

SET_CDR:
	PUSH(FP);
	MOV(FP, SP);
	PUSH(R1);
	PUSH(R2);
	MOV(R1, FPARG(2));
	MOV(R2, FPARG(3));
	MOV(INDD(R1, 2), R2);
	MOV(R0, SOB_VOID);
	POP(R2);
	POP(R1);
	JUMP(END);





END:
	POP(FP);
	RETURN;