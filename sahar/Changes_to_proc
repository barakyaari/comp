Functions to Implement:

append (variadic), apply, <(variadic), = (variadic), >(variadic), +(variadic), /(variadic), *(variadic), -(variadic), boolean?, car, cdr,
char->integer, char?, cons, denominator, eq?, integer?, integer->char, list(variadic), make-string, make-vector, map, not, null?, number? ,
numerator, pair?, procedure?, rational?, remainder, set-car!, set-cdr!, string-length, string-ref, string-set!, string->symbol, string?, symbol?, symbol->string,
vector, vector-length, vector-ref, vector-set!, vector?, zero?

Implement in CISC:
	apply
<bin
=bin
>bin
+bin
	/bin
	*bin
	-bin
	boolean?
	car
	cdr
	char->integer
	char?
	cons
	denominator
	eq?
	integer?
	integer->char
	make-string
	make-vector
	not
	null?
	numerator
	pair?
	procedure?
	rational?
	set-car!
	set-cdr!
	string?
	symbol?
	vector?
	zero?
	number?

Implement in Scheme:
	append-var
<var
=var
>var
+var
	/var
	*var
	-var
	list-variadic
	map

Not sure where:
	append
	remainder
	string-length?
	string-ref
	string-set!
	string->symbol
	symbol->string
	vector
	vector-length
	vector-ref
	vector-set!

Changes:
VARIADIC_PLUS_END	->		VAR_PLUS_END
VARIADIC_PLUS_LOOP	->		VAR_PLUS_LOOP
VARIADIC_PLUS		->	VAR_PLUS
VARIADIC_GT_LOOP_2		-> VAR_GREATERTHAN_LOOP2
VARIADIC_GT_END		->		VAR_GREATERTHAN_END
VARIADIC_GT_LOOP	->	VAR_GREATERTHAN_LOOP
VARIADIC_GT		->		VAR_GREATERTHAN
VARIADIC_EQUAL_LOOP_2 	-> 	VAR_EQUAL_LOOP2
VARIADIC_EQUAL_END 		-> 	VAR_EQUAL_END:
VARIADIC_EQUAL_LOOP: 	-> 	VAR_EQUAL_LOOP:
VARIADIC_EQUAL:		->	VAR_EQUAL:
VARIADIC_LT_END:	->	VAR_LESSTHAN_END:
VARIADIC_LT_LOOP_2:	->	VAR_LESSTHAN_LOOP2:
VARIADIC_LT_LOOP: 	->	VAR_LESSTHAN_LOOP:
VARIADIC_LT:	->		VAR_LESSTHAN:
PRINT_R0_END:  ->  	PRINT_END:
PRINT_R0:		->		PRINT_R0_VALUE:
CHECK_BOOLEAN_AFTER_CALL:	->		CHECK_BOOL:
CHECK_BOOLEAN_RES:		->		CHECK_BOOL_RESULT:
RES_TRUE:	->		RETURN_TRUE:
LOC_NUM_ARGS 	->		NUMOFARGS

Outside variables to be declared:

NUMOFARGS