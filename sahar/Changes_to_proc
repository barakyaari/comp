Functions to Implement:

append (variadic), apply, <(variadic), = (variadic), >(variadic), +(variadic), /(variadic), *(variadic), -(variadic), boolean?, car, cdr,
char->integer, char?, cons, denominator, eq?, integer?, integer->char, list(variadic), make-string, make-vector, map, not, null?, number? ,
numerator, pair?, procedure?, rational?, remainder, set-car!, set-cdr!, string-length, string-ref, string-set!, string->symbol, string?, symbol?, symbol->string,
vector, vector-length, vector-ref, vector-set!, vector?, zero?

Implement in CISC:
	apply
	denominator
	eq?
	not
	numerator
	rational?

Implement in Scheme:
	append-var
	map

Not sure where or how:
	append
	number?	

Finished:
	<var
	=var
	>var
	+var
	/var
	*var
	-var
	string?
	symbol?
	vector?
	zero?
	null?
	pair?
	procedure?
	integer?
	char?
	boolean?
	remainder
	string-length
	string-ref	
	string-set!
	make-string
	vector
	vector-length
	vector-ref
	vector-set!
	make-vector
	cons
	car
	cdr
	set-car!
	set-cdr!
	integer->char
	char->integer
	list (variadic)
	string->symbol
	symbol->string
	
Changes:

STRING_TO_SYMBOL_END -> STR_TO_SYMBOL_END
STRING_TO_SYMBOL -> STR_TO_SYMBOL
SYMBOL_TO_STRING -> SYMBOL_TO_STR
LIST_END -> LIST_END
LIST_LAST -> LIST_LAST_ELEMENT
LIST_CONTINUE -> LIST_CONTINUE
FIRST_TIME -> LIST_FIRST
CREATE_NODES -> LIST_CREATE_NODES
CHAR_TO_INTEGER -> CHAR_TO_INT
INTEGER_TO_CHAR ->  INT_TO_CHAR
MAKE_VECTOR_AFTER_PUSH_CHARS -> MAKE_VECTOR_AFTER_PUSH
MAKE_VECTOR_PUSH_CHARS_LOOP -> MAKE_VECTOR_PUSH_LOOP
MAKE_VECTOR_AFTER_ARG2 -> MAKE_VECTOR_ARG2
MAKE_VECTOR_CHAR_0 -> MAKE_VECTOR_CHAR0
VECTOR_AFTER_PUSH -> VECTOR_AFTER_PUSH_ARGS
PUSH_VECTOR_ARGS -> PUSH_VEC_ARGS
VECTOR_SET -> VEC_SET
VECTOR_REF -> VEC_REF
VECTOR_LENGTH -> VEC_LENGTH
MAKE_STRING_AFTER_PUSH_CHARS -> MAKE_STRING_AFTER_PUSH
MAKE_STRING_PUSH_CHARS_LOOP -> MAKE_STRING_PUSH_LOOP
MAKE_STRING_AFTER_ARG2 -> 	MAKE_STRING_ARG2
MAKE_STRING_CHAR_0 -> 	MAKE_STRING_CHAR0
STRING_SET -> 	STR_SET
STRING_REF -> STR_REF
STRING_LENGTH 	-> 	STR_LENGTH
REMAINDER 	-> 	REMAINDER
IS_PROCEDURE -> ISPROCEDURE
IS_ZERO_MY -> ISZERO
IS_VECTOR	-> ISVECTOR
IS_SYMBOL	-> ISSYMBOL
IS_STRING	-> ISSTRING
IS_PAIR	-> ISPAIR
IS_INTEGER 	-> ISINTEGER
IS_NUMBER	-> ISNUMBER
IS_NULL	-> ISNULL
IS_CHAR	-> ISCHAR
IS_BOOLEAN 	->  ISBOOLEAN
VARIADIC_MINUS_LOOP_2 ->	VAR_MIN_LOOP2
VARIADIC_MINUS_END	->	VAR_MIN_END
VARIADIC_MINUS_LOOP ->	VAR_MIN_LOOP
VARIADIC_MINUS_NOT_ONLY_ONE_ARG		-> VAR_MIN_MORE_THAN_ONE_ARG
VARIADIC_MINUS 	->	VAR_MIN
VARIADIC_MUL_END	->	VAR_MUL_END
VARIADIC_MUL_LOOP 	->	VAR_MUL_LOOP
VARIADIC_MUL	->	VAR_MUL
VARIADIC_DIV_LOOP2	->	VAR_DIV_LOOP2
VARIADIC_DIV_LOOP	->	VAR_DIV_LOOP
VARIADIC_DIV_END	->	VAR_DIV_END
VARIADIC_DIV_NOT_ONLY_ONE_ARG	->	VAR_DIV_MORE_THAN_ONE_ARG
VARIADIC_DIV		->		VAR_DIV
VARIADIC_PLUS_END	->		VAR_PLUS_END
VARIADIC_PLUS_LOOP	->		VAR_PLUS_LOOP
VARIADIC_PLUS		->	VAR_PLUS
VARIADIC_GT_LOOP_2		-> VAR_GREATERTHAN_LOOP2
VARIADIC_GT_END		->		VAR_GREATERTHAN_END
VARIADIC_GT_LOOP	->	VAR_GREATERTHAN_LOOP
VARIADIC_GT		->		VAR_GREATERTHAN
VARIADIC_EQUAL_LOOP_2 	-> 	VAR_EQUAL_LOOP2
VARIADIC_EQUAL_END 		-> 	VAR_EQUAL_END:
VARIADIC_EQUAL_LOOP: 	-> 	VAR_EQUAL_LOOP:
VARIADIC_EQUAL:		->	VAR_EQUAL:
VARIADIC_LT_END:	->	VAR_LESSTHAN_END:
VARIADIC_LT_LOOP_2:	->	VAR_LESSTHAN_LOOP2:
VARIADIC_LT_LOOP: 	->	VAR_LESSTHAN_LOOP:
VARIADIC_LT:	->		VAR_LESSTHAN:
PRINT_R0_END:  ->  	PRINT_END:
PRINT_R0:		->		PRINT_R0_VALUE:
CHECK_BOOLEAN_AFTER_CALL:	->		CHECK_BOOL:
CHECK_BOOLEAN_RES:		->		CHECK_BOOL_RESULT:
RES_TRUE:	->		RETURN_TRUE:
LOC_NUM_ARGS 	->		NUMOFARGS


Outside variables to be declared:

	NUMOFARGS
